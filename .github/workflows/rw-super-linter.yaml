---
# original template from: https://github.com/bretfisher/super-linter-workflow/blob/main/.github/workflows/reusable-super-linter.yaml

###########################
###########################
## Linter GitHub Actions ##
###########################
###########################
name: Lint all the codes

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

on:
  workflow_call:
    inputs:
      devops-only:
        description: For a DevOps-focused repository. Prevents some code-language linters from running
        required: false
        type: boolean
        default: false
      filter-regex-exclude:
        description: A regex to exclude files from linting
        required: false
        type: string
      filter-regex-include:
        description: A regex to include files from linting
        required: false
        type: string
      VALIDATE_CSHARP:
        description: Validate CSHARP
        required: false
        type: boolean
        default: false
      runnerOS:
        required: false
        type: string
        default: 'ubuntu-latest'
        description: The default runner to use for this workflow

permissions:
  contents: read           # git permissions to repo pull/push
  statuses: write          # read/write to repo custom statuses and checks

jobs:
  super-lint:
    name: Super-Linter
    runs-on: ${{ inputs.runnerOS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within super-linter
          fetch-depth: 0

      #############################
      # custom DEFAULT_BRANCH for repos where PR target isn't always main/master
      #############################
      - name: Set DEFAULT_BRANCH to PR target
        # if base_ref has a value, this is a PR
        # we save the PR target branch name to a variable for use in linter config
        # we pass string between job steps by echoing to $GITHUB_ENV, making it available in $env later
        if: ${{ github.base_ref != '' }}
        run: |
          # shellcheck disable=2086
          echo "DEFAULT_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "this is a PR branch. Let's only lint the files that are changed against the target branch '${{ github.base_ref }}'"

      - name: Set DEFAULT_BRANCH to current branch
        # if base_ref has no value, this is just a commit on a branch
        # we need to strip refs/heads from github.ref to find the current branch name
        # then save the current branch name to a variable for use in linter config later
        # we pass strings between job steps by echoing to $GITHUB_ENV, making it available in $env later
        if: ${{ github.base_ref == '' }}
        run: |
          # shellcheck disable=2086
          echo "DEFAULT_BRANCH=$(echo '${{ github.ref }}' | sed 's/refs\/heads\///')" >> $GITHUB_ENV
          echo "this is just a branch push to branch '${{ github.ref }}', not a PR."

      # used as a debug step to ensure we're only linting all files on release branches
      - name: Are we linting all files?
        run: |
          echo VALIDATE_ALL_CODEBASE=${{ !contains(github.event_name, 'pull_request') }}

      # customize excluded paths and files with regex
      - name: FILTER_REGEX_EXCLUDE
        if: ${{ inputs.filter-regex-exclude }}
        run: |
          # shellcheck disable=2086
          {
            echo "FILTER_REGEX_EXCLUDE='${{ inputs.filter-regex-exclude }}'" >> $GITHUB_ENV
          }

      # customize included paths and files with regex
      - name: FILTER_REGEX_INCLUDE
        if: ${{ inputs.filter-regex-include }}
        run: |
          # shellcheck disable=2086
          {
            echo "FILTER_REGEX_INCLUDE='${{ inputs.filter-regex-include }}'" >> $GITHUB_ENV
          }

      # disable non-DevOps focused linters that might run on sample code or 3rd party code
      # these env's will get pass to the next step
      - name: Disable non-DevOps linters
        if: ${{ inputs.devops-only == true }}
        run: |
          # shellcheck disable=2086
          { 
            echo "VALIDATE_CSS=false"; 
            echo "VALIDATE_HTML=false"; 
            echo "VALIDATE_JAVASCRIPT_ES=false";
            echo "VALIDATE_TYPESCRIPT_ES=false";
            echo "VALIDATE_TYPESCRIPT_STANDARD=false";
            echo "VALIDATE_JAVASCRIPT_STANDARD=false";
            echo "VALIDATE_PYTHON_MYPY=false";
            echo "VALIDATE_PYTHON_BLACK=false";
            echo "VALIDATE_PYTHON_FLAKE8=false";
            echo "VALIDATE_PYTHON_ISORT=false";
            echo "VALIDATE_RUBY=false";
            echo "VALIDATE_PHP=false";
            echo "VALIDATE_CSHARP=${{ inputs.VALIDATE_CSHARP }}";
          } >> $GITHUB_ENV

      - name: Enable standard linters with CSHARP
        if: ${{ inputs.VALIDATE_CSHARP == true }}
        run: |
          # shellcheck disable=2086
          { 
            echo "VALIDATE_CSHARP=${{ inputs.VALIDATE_CSHARP }}";
            echo "VALIDATE_CHECKOV=true";
            echo "VALIDATE_GITHUB_ACTIONS=true";
            echo "VALIDATE_GITLEAKS=true";
            echo "VALIDATE_MARKDOWN=true";
            echo "VALIDATE_NATURAL_LANGUAGE=true";
            echo "VALIDATE_YAML=true";
          } >> $GITHUB_ENV

      - name: debug env for super linter
        run: |
          # shellcheck disable=2086
          {
            echo "DEFAULT_BRANCH=${{ env.DEFAULT_BRANCH }}";
            echo "PR=${{ github.base_ref }}"
            echo "BRANCH=${{ github.ref }}"
            echo "VALIDATE_ALL_CODEBASE${{ !contains(github.event_name, 'pull_request') }}"
          }

      #############################
      # Run many Linters against changed files on PRs, and ALL files on commit to release branch
      #############################
      # https://github.com/marketplace/actions/super-linter
      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # by default super-linter assumes our repo default branch doesn't change
          # and it also assumes our PRs are always against that default branch
          # for multi-trunk (releases) repos, this get the base branch from the previous steps
          # see issue https://github.com/github/super-linter/issues/1123
          DEFAULT_BRANCH: ${{ env.DEFAULT_BRANCH }}
          # setting this to false means that only changed files will be scanned in each commit
          VALIDATE_ALL_CODEBASE: ${{ !contains(github.event_name, 'pull_request') }}
          KUBERNETES_KUBEVAL_OPTIONS: --ignore-missing-schemas --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/
          # ignore files that generate too many false positives from included examples
          VALIDATE_BASH: false
          VALIDATE_SHELL_SHFMT: false
          VALIDATE_EDITORCONFIG: false
          VALIDATE_TYPESCRIPT_STANDARD: false
          LINTER_RULES_PATH: .github/linters
          FILTER_REGEX_EXCLUDE: ${{ env.FILTER_REGEX_EXCLUDE }}
          FILTER_REGEX_INCLUDE: ${{ env.FILTER_REGEX_INCLUDE }}
