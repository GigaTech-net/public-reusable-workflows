---
name: PR Complexity Check

on:
  workflow_call:
    inputs:
      directoriesToCheck:
        required: false
        type: string
        description: "pipe delimited top level directories to check for complexity"
        default: "src|input"
      linesThreshold:
        required: false
        type: number
        description: "the number of lines that have changed to be considered complex"
        default: 200
      filesThreshold:
        required: false
        type: number
        description: "the number of files that have changed to be considered complex"
        default: 5
      reviewTeam:
        required: false
        type: string
        description: "the team in the GigaTECH-net github repo to use for code reviews"
        default: "GT-dev-randd"
      internTeam:
        required: false
        type: string
        description: "the team in the GigaTECH-net github for interns"
        default: "GT-interns-randdd"
      needsReviewLabel:
        required: false
        type: string
        description: "the label to signify that a manual review is required"
        default: "needs-human-review"
      tgtBranch:
        required: false
        type: string
        description: "the target branch to check complexity against (ie target of a PR)"
        default: "origin/main"
      isPullRequest:
        required: false
        type: string
        description: "the call is not a pull request"
        default: "false"
    outputs:
      changed_files:
        description: "the files that were changed"
        value: ${{ jobs.check_complexity.outputs.changed_files }}
      changed_lines:
        description: "the number of lines that were changed"
        value: ${{ jobs.check_complexity.outputs.changed_lines }}
      complex:
        description: "boolean indicating complexity, true = complex, false = not complex"
        value: ${{ jobs.check_complexity.outputs.complex }}
      team_members:
        description: "the team members to request a review from"
        value: ${{ jobs.check_complexity.outputs.team_members }}

permissions:
  pull-requests: write
  contents: write

jobs:
  check_complexity:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.files.outputs.changed_files }}
      changed_lines: ${{ steps.lines.outputs.changed_lines }}
      complex: ${{ steps.complexity.outputs.complex }}
      team_members: ${{ steps.team_members.outputs.team_members }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get changed files
        id: files
        run: |
          # shellcheck disable=SC2086
          {
            CHANGED_FILES=$(git diff-index --name-only ${{ inputs.tgtBranch }})
            {
              echo 'changed_files<<EOF'
              echo $CHANGED_FILES
              echo EOF 
            } >> $GITHUB_OUTPUT
          }

      - name: Count changed lines
        id: lines
        run: |
          # shellcheck disable=SC2086
          {
            CHANGED_LINES=$(git diff-index --shortstat ${{ inputs.tgtBranch }} | awk '{print $4}')
            echo "changed_lines=$CHANGED_LINES" >> $GITHUB_OUTPUT
          }

      - name: Check for complexity
        id: complexity
        run: |
          # shellcheck disable=SC2086
          {
            FILES="${{ steps.files.outputs.changed_files }}"
            LINES="${{ steps.lines.outputs.changed_lines }}"
            FILES_COMPLEXITY_THRESHOLD=${{ inputs.filesThreshold }}
            LINES_COMPLEXITY_THRESHOLD=${{ inputs.linesThreshold }}
            COMPLEX=false
            COMPLEX_MSG="Files and Lines thresholds not surpassed."

            totalFiles=0
            for FILE in $FILES; do
              echo "Checking file: $FILE"
              if [[ "$FILE" =~ ^(${{ inputs.directoriesToCheck }})/ ]]; then
                totalFiles=$((totalFiles+1))
              fi
            done

            if [ $totalFiles -gt $FILES_COMPLEXITY_THRESHOLD ]; then
              COMPLEX_MSG="Complexity: files threshold($FILES_COMPLEXITY_THRESHOLD) exceeded with $totalFiles files."
              COMPLEX=true
            elif [ $LINES -gt $LINES_COMPLEXITY_THRESHOLD ]; then
              COMPLEX_MSG="Complexity: lines threshold($LINES_COMPLEXITY_THRESHOLD) exceeded with $LINES lines."
              COMPLEX=true
            fi

            echo "Complex change ===> $COMPLEX : MSG ===> $COMPLEX_MSG"

            {
              echo "complex=$COMPLEX"
              echo "complex_msg=$COMPLEX_MSG"
            } >> $GITHUB_OUTPUT
          }

      - name: Check if user intern
        id: intern_check
        env:
          GITHUB_TOKEN: ${{ secrets.GT_DEVSECOPS_PAT }}
        run: |
          # shellcheck disable=SC2086
          {
            IS_INTERN=false
            PR_AUTHOR="${{ github.actor }}"
            if [ "$PR_AUTHOR" != "dependabot[bot]" ]; then

              INTERN_TEAM=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/orgs/${{ github.repository_owner }}/teams/${{ inputs.internTeam }}/members?role=member | jq -r '.[].login')

              if echo "$INTERN_TEAM" | grep -qw "$PR_AUTHOR"; then
                echo "$PR_AUTHOR is an intern."
                IS_INTERN=true
              else
                echo "$PR_AUTHOR is not a intern."
              fi
              echo "is_intern=$IS_INTERN" >> $GITHUB_OUTPUT
            fi
          }
  
      - name: Get team members
        if: steps.complexity.outputs.complex == 'true' || steps.intern_check.outputs.is_intern == 'true'
        id: team_members
        env:
          GITHUB_TOKEN: ${{ secrets.GT_DEVSECOPS_PAT }}
        run: |
          # shellcheck disable=SC2086
          {
            PR_AUTHOR="${{ github.actor }}"
            GH_TEAM_MEMBERS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/orgs/${{ github.repository_owner }}/teams/${{ inputs.reviewTeam }}/members)

            if [[ $GH_TEAM_MEMBERS == *"login"* ]]; then
                TEAM_MEMBERS=$(echo $GH_TEAM_MEMBERS | jq -r '.[].login')
                FILTERED_TEAM_MEMBERS=$(echo "$TEAM_MEMBERS" | grep -v "^$PR_AUTHOR" | tr '\n' ' ')
            else
                echo "Error reading team members from Github!"
                echo $GH_TEAM_MEMBERS
                FILTERED_TEAM_MEMBERS=""
            fi
            {
              echo 'team_members<<EOF'
              echo $FILTERED_TEAM_MEMBERS
              echo EOF
            } >> $GITHUB_OUTPUT
          }

      - name: Request reviews
        if: steps.team_members.outputs.team_members != ''
        run: |
          # shellcheck disable=SC2043
          {
            for MEMBER in ${{ steps.team_members.outputs.team_members }}; do
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/requested_reviewers \
                -d "{\"reviewers\":[\"$MEMBER\"]}"
            done
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GT_DEVSECOPS_PAT }}

      - name: comment pull request not complex
        if: github.event_name=='pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: 'PR Complexity : ${{ steps.complexity.outputs.complex_msg }} | Intern made change : ${{ steps.intern_check.outputs.is_intern }}'
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GT_DEVSECOPS_PAT }}

      - name: Add label if complex
        if: steps.complexity.outputs.complex == 'true' || steps.intern_check.outputs.is_intern == 'true' && github.event_name=='pull_request'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ inputs.needsReviewLabel }}
          number: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GT_DEVSECOPS_PAT }}
  